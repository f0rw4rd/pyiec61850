name: Build and Release pyiec61850 Wheel

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'libiec61850 version (e.g., v1.6)'
        required: true
        default: 'v1.6'

# Add permissions needed for releases
permissions:
  contents: write
  packages: write

jobs:
  build-wheels:
    name: Build wheels for multiple Python versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version from tag or input
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building for libiec61850 version: ${VERSION}"

      - name: Create Python-specific Dockerfile
        run: |
          # Use bullseye base image for all supported Python versions
          BASE_IMAGE="python:${{ matrix.python-version }}-slim-bullseye"
          
          cat > Dockerfile.py${{ matrix.python-version }} << EOF
          FROM $BASE_IMAGE AS builder

          # Set libiec61850 version as a build argument
          ARG LIBIEC61850_VERSION=v1.6

          # Install build dependencies
          RUN apt-get update && apt-get install -y --no-install-recommends \\
              git \\
              build-essential \\
              cmake \\
              swig \\
              python3-dev \\
              python3-setuptools \\
              python3-wheel \\
              python3-pip \\
              wget tar \\
              && rm -rf /var/lib/apt/lists/*

          # Create working directory
          WORKDIR /build

          # Clone libiec61850 with specified version
          RUN echo "Building libiec61850 version: \$LIBIEC61850_VERSION" && \\
              git clone --depth 1 --branch \$LIBIEC61850_VERSION https://github.com/mz-automation/libiec61850.git

          # Download mbedTLS directly
          RUN cd libiec61850/third_party/mbedtls && \\
              wget https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v3.6.0.tar.gz --no-check-certificate && \\
              tar -xzf v3.6.0.tar.gz

          # Copy patch files
          COPY patches/ /build/patches/

          # Apply patches
          RUN cd /build/libiec61850 && \\
              if [ -f /build/patches/iec61850.i.patch ]; then \\
                  IEC_FILE=\$(find . -name "iec61850.i") && \\
                  echo "Applying patch to \$IEC_FILE" && \\
                  patch -p1 \$IEC_FILE < /build/patches/iec61850.i.patch; \\
              fi

          # Build libiec61850 with Python bindings
          WORKDIR /build/libiec61850
          RUN mkdir -p build && \\
              cd build && \\
              cmake -DCMAKE_INSTALL_PREFIX=/usr \\
                    -DBUILD_PYTHON_BINDINGS=ON \\
                    .. && \\
              make WITH_MBEDTLS3=1 -j\$(nproc) && \\
              make install

          # Create a Python package for pyiec61850
          WORKDIR /build/pyiec61850-package
          RUN mkdir -p pyiec61850

          # Create setup.py file with version
          RUN PACKAGE_VERSION=\$(echo \$LIBIEC61850_VERSION | sed 's/^v//').0 && \\
              echo 'from setuptools import setup, find_packages' > setup.py && \\
              echo 'from setuptools.dist import Distribution' >> setup.py && \\
              echo '' >> setup.py && \\
              echo 'class BinaryDistribution(Distribution):' >> setup.py && \\
              echo '    def has_ext_modules(self):' >> setup.py && \\
              echo '        return True' >> setup.py && \\
              echo '' >> setup.py && \\
              echo 'setup(' >> setup.py && \\
              echo '    name="pyiec61850",' >> setup.py && \\
              echo "    version=\"\$PACKAGE_VERSION\"," >> setup.py && \\
              echo '    packages=find_packages(),' >> setup.py && \\
              echo '    package_data={' >> setup.py && \\
              echo '        "pyiec61850": ["*.so", "*.py", "lib*.so*"],' >> setup.py && \\
              echo '    },' >> setup.py && \\
              echo '    include_package_data=True,' >> setup.py && \\
              echo "    description=\"Python bindings for libiec61850 \$LIBIEC61850_VERSION\"," >> setup.py && \\
              echo '    python_requires=">=${{ matrix.python-version }}",' >> setup.py && \\
              echo '    distclass=BinaryDistribution,' >> setup.py && \\
              echo ')' >> setup.py

          # Copy Python modules and libraries
          RUN cp -r /build/libiec61850/build/pyiec61850/* pyiec61850/ && \\
              cp /build/libiec61850/build/src/libiec61850.so* pyiec61850/

          # Create package initialization file
          RUN echo "import os, sys, ctypes" > pyiec61850/__init__.py && \\
              echo "_package_dir = os.path.dirname(os.path.abspath(__file__))" >> pyiec61850/__init__.py && \\
              echo "for lib_file in os.listdir(_package_dir):" >> pyiec61850/__init__.py && \\
              echo "    if lib_file.startswith('libiec61850.so'):" >> pyiec61850/__init__.py && \\
              echo "        try:" >> pyiec61850/__init__.py && \\
              echo "            lib_path = os.path.join(_package_dir, lib_file)" >> pyiec61850/__init__.py && \\
              echo "            ctypes.CDLL(lib_path)" >> pyiec61850/__init__.py && \\
              echo "            break" >> pyiec61850/__init__.py && \\
              echo "        except Exception as e:" >> pyiec61850/__init__.py && \\
              echo "            print(f'Warning: Failed to load {lib_file}: {e}')" >> pyiec61850/__init__.py

          # Build wheel
          RUN pip install wheel setuptools && python setup.py bdist_wheel

          # Final stage
          FROM scratch
          COPY --from=builder /build/pyiec61850-package/dist/*.whl /wheels/
          EOF

      - name: Build wheel for Python ${{ matrix.python-version }}
        run: |
          docker build -f Dockerfile.py${{ matrix.python-version }} -t pyiec61850-py${{ matrix.python-version }} --build-arg LIBIEC61850_VERSION=${{ steps.get_version.outputs.version }} .

      - name: Extract wheel from Docker image
        run: |
          mkdir -p ./dist-py${{ matrix.python-version }}
          docker create --name wheel-container-py${{ matrix.python-version }} pyiec61850-py${{ matrix.python-version }}
          docker cp wheel-container-py${{ matrix.python-version }}:/wheels/. ./dist-py${{ matrix.python-version }}/
          docker rm wheel-container-py${{ matrix.python-version }}

      - name: Display built wheel files
        run: |
          ls -la ./dist-py${{ matrix.python-version }}/
          
      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-py${{ matrix.python-version }}
          path: ./dist-py${{ matrix.python-version }}/*.whl

  create-release:
    name: Create GitHub Release
    needs: [build-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref_type == 'tag'
    
    steps:
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-wheels

      - name: Organize wheels
        run: |
          mkdir -p ./dist
          find all-wheels -name "*.whl" -exec cp {} ./dist/ \;
          ls -la ./dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/*.whl
          body: |
            Python wheels for libiec61850 ${{ steps.get_version.outputs.version }}
            
            ## Supported Python Versions
            - Python 3.8, 3.9, 3.10, 3.11, 3.12, 3.13 (Linux x86_64)
            
            ## Installation
            ```bash
            pip install pyiec61850 --find-links https://github.com/f0rw4rd/pyiec61850/releases/download/${{ steps.get_version.outputs.version }}/
            ```
            
            Or install directly from GitHub:
            ```bash
            pip install git+https://github.com/f0rw4rd/pyiec61850.git
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}